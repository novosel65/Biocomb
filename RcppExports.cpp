// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fun1_chi
List fun1_chi(DataFrame data, CharacterVector classI);
RcppExport SEXP Biocomb_fun1_chi(SEXP dataSEXP, SEXP classISEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type classI(classISEXP);
    __result = Rcpp::wrap(fun1_chi(data, classI));
    return __result;
END_RCPP
}
// fun2_chi
List fun2_chi(List int_l, NumericMatrix mat_int);
RcppExport SEXP Biocomb_fun2_chi(SEXP int_lSEXP, SEXP mat_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type int_l(int_lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat_int(mat_intSEXP);
    __result = Rcpp::wrap(fun2_chi(int_l, mat_int));
    return __result;
END_RCPP
}
// fun3_chi
List fun3_chi(List chi_s, List int_l, DataFrame datain, double chi_value, NumericMatrix mat_int);
RcppExport SEXP Biocomb_fun3_chi(SEXP chi_sSEXP, SEXP int_lSEXP, SEXP datainSEXP, SEXP chi_valueSEXP, SEXP mat_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type chi_s(chi_sSEXP);
    Rcpp::traits::input_parameter< List >::type int_l(int_lSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type datain(datainSEXP);
    Rcpp::traits::input_parameter< double >::type chi_value(chi_valueSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat_int(mat_intSEXP);
    __result = Rcpp::wrap(fun3_chi(chi_s, int_l, datain, chi_value, mat_int));
    return __result;
END_RCPP
}
// check_incons
double check_incons(DataFrame data, DataFrame vrem_nom, CharacterVector cl);
RcppExport SEXP Biocomb_check_incons(SEXP dataSEXP, SEXP vrem_nomSEXP, SEXP clSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type vrem_nom(vrem_nomSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type cl(clSEXP);
    __result = Rcpp::wrap(check_incons(data, vrem_nom, cl));
    return __result;
END_RCPP
}
// fun4_chi
DataFrame fun4_chi(List chi_s, List int_l, DataFrame datain, DataFrame vrem_nominal, NumericVector chi_attr, NumericVector sig_attr, CharacterVector cl, NumericMatrix mat_int, double threshold, int df, double step, int delta, int shag);
RcppExport SEXP Biocomb_fun4_chi(SEXP chi_sSEXP, SEXP int_lSEXP, SEXP datainSEXP, SEXP vrem_nominalSEXP, SEXP chi_attrSEXP, SEXP sig_attrSEXP, SEXP clSEXP, SEXP mat_intSEXP, SEXP thresholdSEXP, SEXP dfSEXP, SEXP stepSEXP, SEXP deltaSEXP, SEXP shagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type chi_s(chi_sSEXP);
    Rcpp::traits::input_parameter< List >::type int_l(int_lSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type datain(datainSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type vrem_nominal(vrem_nominalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi_attr(chi_attrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig_attr(sig_attrSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type cl(clSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat_int(mat_intSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type shag(shagSEXP);
    __result = Rcpp::wrap(fun4_chi(chi_s, int_l, datain, vrem_nominal, chi_attr, sig_attr, cl, mat_int, threshold, df, step, delta, shag));
    return __result;
END_RCPP
}
// forward_path
NumericVector forward_path(NumericVector features, DataFrame m3);
RcppExport SEXP Biocomb_forward_path(SEXP featuresSEXP, SEXP m3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type m3(m3SEXP);
    __result = Rcpp::wrap(forward_path(features, m3));
    return __result;
END_RCPP
}
// CalcGene
List CalcGene(List s_data, NumericMatrix seqAll, int prodValue, NumericVector thresholds);
RcppExport SEXP Biocomb_CalcGene(SEXP s_dataSEXP, SEXP seqAllSEXP, SEXP prodValueSEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type s_data(s_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type seqAll(seqAllSEXP);
    Rcpp::traits::input_parameter< int >::type prodValue(prodValueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    __result = Rcpp::wrap(CalcGene(s_data, seqAll, prodValue, thresholds));
    return __result;
END_RCPP
}
// CalcROC
List CalcROC(List s_data, NumericVector seq, NumericVector thresholds);
RcppExport SEXP Biocomb_CalcROC(SEXP s_dataSEXP, SEXP seqSEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type s_data(s_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    __result = Rcpp::wrap(CalcROC(s_data, seq, thresholds));
    return __result;
END_RCPP
}
